generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String             @id @default(uuid())
  name         String
  email        String             @unique
  password     String
  plan_type    String             @default("free")
  payment      Boolean            @default(false)
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt
  reviews      Review[]
  profiles Profile[]

  @@map("users")
}

// Modelo para os perfis
model Profile{
  id String @id @default(uuid())
  name String
  avatarUrl String?
  userId String 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  watchHistory UserWatchHistory[]
  watchList UserWatchlist[]

  @@unique([userId, name])
  @@map("profiles")
}

model Video {
  id           String             @id @default(cuid())
  title        String
  slug        String @unique
  description  String?
  duration     Int
  releaseDate  DateTime
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  videoUrl     String
  thumbnailUrl String
  introStartTime Int?
  introEndTime Int?
  trailerUrl   String?
  ageRating    AgeRating
  type         VideoType
  status       VideoStatus        @default(ACTIVE)
  isOriginal   Boolean            @default(false)
  reviews      Review[]
  seasons      Season[]
  watchHistory UserWatchHistory[]
  watchlist    UserWatchlist[]
  cast         VideoCast[]
  genres       VideoGenre[]

  @@map("videos")
}

model Genre {
  id     String       @id @default(cuid())
  name   String       @unique
  slug   String       @unique
  videos VideoGenre[]

  @@map("genres")
}

model VideoGenre {
  id      String @id @default(cuid())
  videoId String
  genreId String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, genreId])
  @@map("video_genres")
}

model Person {
  id        String      @id @default(cuid())
  name      String
  biography String?
  birthDate DateTime?
  photoUrl  String?
  videoCast VideoCast[]

  @@map("people")
}

model VideoCast {
  id        String   @id @default(cuid())
  videoId   String
  personId  String
  role      CastRole
  character String?
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, personId, role])
  @@map("video_cast")
}

model Season {
  id           String    @id @default(cuid())
  videoId      String
  seasonNumber Int
  title        String?
  description  String?
  releaseDate  DateTime?
  episodes     Episode[]
  video        Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([videoId, seasonNumber])
  @@map("seasons")
}

model Episode {
  id            String   @id @default(cuid())
  seasonId      String
  episodeNumber Int
  title         String
  description   String?
  duration      Int
  videoUrl      String
  thumbnailUrl  String
  releaseDate   DateTime
  introStartTime Int?
  introEndTime Int?
  season        Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  @@unique([seasonId, episodeNumber])
  @@map("episodes")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("reviews")
}

model UserWatchlist {
  id      String   @id @default(cuid())
  videoId String
  addedAt DateTime @default(now())
  video   Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, videoId])
  @@map("user_watchlist")
}

model UserWatchHistory {
  id        String   @id @default(cuid())
  videoId   String
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  watchedAt DateTime @default(now())
  episodeId String?
  progress  Int      @default(0)
  completed Boolean  @default(false)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("user_watch_history")
}

enum AgeRating {
  G
  PG
  PG13
  R
  NC17
}

enum VideoType {
  MOVIE
  SERIES
  DOCUMENTARY
  ANIMATION
}

enum VideoStatus {
  ACTIVE
  INACTIVE
  COMING_SOON
  ARCHIVED
}

enum CastRole {
  ACTOR
  DIRECTOR
  PRODUCER
  WRITER
  CINEMATOGRAPHER
  COMPOSER
}


